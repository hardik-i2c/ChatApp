{"version":3,"sources":["apolloProvider.js","pages/Register.jsx","context/auth.jsx","pages/Login.jsx","context/message.jsx","pages/home/Users.jsx","pages/home/message.jsx","pages/home/Messages.jsx","pages/home/Home.jsx","util/DynamicRoute.jsx","App.js","index.js"],"names":["httpLink","createHttpLink","uri","setContext","_","headers","token","localStorage","getItem","auth","concat","wsLink","WebSocketLink","options","reconnect","connectionParams","splitLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","link","cache","InMemoryCache","ApolloProvider","props","REGISTER_USER","gql","Register","useState","email","username","password","comfirmPassword","variables","setVariables","errors","setErrors","useMutation","update","__","history","push","onError","err","graphQLErrors","extensions","registerUser","loading","Row","className","Col","sm","md","lg","Form","onSubmit","e","preventDefault","Group","controlId","Label","Control","type","value","onChange","target","Button","variant","disabled","to","AuthStateContex","createContext","AuthDispatchContex","user","decodedToken","jwtdecode","expireAt","Date","exp","removeItem","console","log","authReducer","state","action","setItem","payload","Error","AuthProvider","children","useReducer","dispatch","Provider","useAuthState","useContext","useAuthDispatch","LOGIN_USER","Login","useLazyQuery","onCompleted","data","login","window","location","href","loginUser","MessageStateContex","MessageDispatchContex","messageReducer","usersCopy","userIndex","message","messages","users","findIndex","u","map","selected","newUser","latestMessage","MessageProvider","useMessageState","useMessageDispatch","GET_USERS","User","usersMarkup","selectedUser","find","useQuery","getUsers","length","role","classNames","onClick","Image","src","imageUrl","content","xs","Message","sent","from","received","OverlayTrigger","placement","overlay","Tooltip","moment","createdAt","format","transition","uuid","SEND_MESSAGE","GET_MESSAGES","Messages","setContent","getMessages","messagesLoading","messagesData","sendMessage","useEffect","selectedChatMarkup","submitMessage","trim","index","placeholder","NEW_MESSAGE","Home","authDispatch","messageDispatch","useSubscription","messageData","messageError","error","newMessage","otherUser","DynamicRoute","authenticated","guest","component","App","Container","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c78595e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider as Provider,\r\n  createHttpLink,\r\n  split,\r\n} from \"@apollo/client\";\r\n\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\n\r\nlet httpLink = createHttpLink({\r\n  uri: \"http://localhost:4000/\",\r\n});\r\n\r\nlet authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      auth: token ? `Bearer ${token}` : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nhttpLink = authLink.concat(httpLink);\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://localhost:4000/graphql\",\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: {\r\n      auth: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    },\r\n  },\r\n});\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n    );\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n\r\nconst client = new ApolloClient({\r\n  link: splitLink,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default function ApolloProvider(props) {\r\n  return <Provider client={client} {...props} />;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $comfirmPassword: String!\r\n  ) {\r\n    register(\r\n      username: $username\r\n      email: $email\r\n      password: $password\r\n      comfirmPassword: $comfirmPassword\r\n    ) {\r\n      username\r\n      email\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\nexport default function Register(props) {\r\n  const [variables, setVariables] = useState({\r\n    email: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    comfirmPassword: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [registerUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update: (_, __) => props.history.push(\"/login\"),\r\n    onError: (err) => setErrors(err.graphQLErrors[0].extensions.errors),\r\n  });\r\n  const submitRegisterForm = (e) => {\r\n    e.preventDefault();\r\n    registerUser({ variables });\r\n  };\r\n  return (\r\n    <Row className=\"bg-white py-5 justify-content-center\">\r\n      <Col sm={8} md={6} lg={4}>\r\n        <h1 className=\"text-center\">Register</h1>\r\n        <Form onSubmit={submitRegisterForm}>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n            <Form.Label className={errors.email && \"text-danger\"}>\r\n              {errors.email ?? \"Email address\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"email\"\r\n              className={errors.email && \"is-invalid\"}\r\n              value={variables.email}\r\n              onChange={(e) => {\r\n                setVariables({ ...variables, email: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\r\n            <Form.Label className={errors.username && \"text-danger\"}>\r\n              {errors.username ?? \"Username\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              className={errors.username && \"is-invalid\"}\r\n              value={variables.username}\r\n              onChange={(e) => {\r\n                setVariables({ ...variables, username: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n            <Form.Label className={errors.password && \"text-danger\"}>\r\n              {errors.password ?? \"Password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              className={errors.password && \"is-invalid\"}\r\n              value={variables.password}\r\n              onChange={(e) => {\r\n                setVariables({ ...variables, password: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicCpassword\">\r\n            <Form.Label className={errors.comfirmPassword && \"text-danger\"}>\r\n              {errors.comfirmPassword ?? \"Comfirm Password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              className={errors.comfirmPassword && \"is-invalid\"}\r\n              value={variables.comfirmPassword}\r\n              onChange={(e) => {\r\n                setVariables({\r\n                  ...variables,\r\n                  comfirmPassword: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <Button variant=\"success\" type=\"submit\" disabled={loading}>\r\n              {loading ? \"loading..\" : \"Register\"}\r\n            </Button>\r\n            <br />\r\n            <small>\r\n              Already have an account. <Link to=\"/login\">Login</Link>\r\n            </small>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\nimport jwtdecode from \"jwt-decode\";\r\n\r\nconst AuthStateContex = createContext();\r\nconst AuthDispatchContex = createContext();\r\n\r\nlet user = null;\r\nconst token = localStorage.getItem(\"token\");\r\nif (token) {\r\n  const decodedToken = jwtdecode(token);\r\n  const expireAt = new Date(decodedToken.exp * 1000);\r\n  if (new Date() > expireAt) {\r\n    localStorage.removeItem(\"token\");\r\n  } else {\r\n    user = decodedToken;\r\n  }\r\n} else {\r\n  console.log(\"token not present.\");\r\n}\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"LOGIN\":\r\n      localStorage.setItem(\"token\", action.payload.token);\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case \"LOGOUT\":\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, { user });\r\n  return (\r\n    <AuthDispatchContex.Provider value={dispatch}>\r\n      <AuthStateContex.Provider value={state}>\r\n        {children}\r\n      </AuthStateContex.Provider>\r\n    </AuthDispatchContex.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuthState = () => useContext(AuthStateContex);\r\nexport const useAuthDispatch = () => useContext(AuthDispatchContex);\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { gql, useLazyQuery } from \"@apollo/client\";\r\nimport { useAuthDispatch } from \"../context/auth\";\r\n\r\nconst LOGIN_USER = gql`\r\n  query login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      username\r\n      email\r\n      token\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\nexport default function Login(props) {\r\n  const [variables, setVariables] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const dispatch = useAuthDispatch();\r\n\r\n  const [loginUser, { loading }] = useLazyQuery(LOGIN_USER, {\r\n    onError: (err) => setErrors(err.graphQLErrors[0].extensions.errors),\r\n    onCompleted: (data) => {\r\n      // console.log(data);\r\n      dispatch({ type: \"LOGIN\", payload: data.login });\r\n      window.location.href = \"/\";\r\n    },\r\n  });\r\n  const submitLoginForm = (e) => {\r\n    e.preventDefault();\r\n    loginUser({ variables });\r\n  };\r\n  return (\r\n    <Row className=\"bg-white py-5 justify-content-center\">\r\n      <Col sm={8} md={6} lg={4}>\r\n        <h1 className=\"text-center\">Login</h1>\r\n        <Form onSubmit={submitLoginForm}>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicUsername\">\r\n            <Form.Label className={errors?.username && \"text-danger\"}>\r\n              {errors.username ?? \"Username\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              className={errors?.username && \"is-invalid\"}\r\n              value={variables.username}\r\n              onChange={(e) => {\r\n                setVariables({ ...variables, username: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n            <Form.Label className={errors?.password && \"text-danger\"}>\r\n              {errors.password ?? \"Password\"}\r\n            </Form.Label>\r\n            <Form.Control\r\n              type=\"password\"\r\n              className={errors?.password && \"is-invalid\"}\r\n              value={variables.password}\r\n              onChange={(e) => {\r\n                setVariables({ ...variables, password: e.target.value });\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <div className=\"text-center\">\r\n            <Button variant=\"success\" type=\"submit\" disabled={loading}>\r\n              {loading ? \"loading..\" : \"Login\"}\r\n            </Button>\r\n            <br />\r\n            <small>\r\n              Don't have an account ? <Link to=\"/register\">Register</Link>\r\n            </small>\r\n          </div>\r\n        </Form>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nconst MessageStateContex = createContext();\r\nconst MessageDispatchContex = createContext();\r\n\r\nconst messageReducer = (state, action) => {\r\n  let usersCopy, userIndex;\r\n  const { username, message, messages } = action.payload;\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        ...state,\r\n        users: action.payload,\r\n      };\r\n    case \"SET_USER_MESSAGES\":\r\n      usersCopy = [...state.users];\r\n      userIndex = usersCopy.findIndex((u) => u.username === username);\r\n      usersCopy[userIndex] = { ...usersCopy[userIndex], messages };\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n    case \"SET_SELECTED_USER\":\r\n      usersCopy = state.users.map((user) => ({\r\n        ...user,\r\n        selected: user.username === action.payload,\r\n      }));\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n    case \"ADD_MESSAGE\":\r\n      usersCopy = [...state.users];\r\n      userIndex = usersCopy.findIndex((u) => u.username === username);\r\n      let newUser = {\r\n        ...usersCopy[userIndex],\r\n        messages: usersCopy[userIndex].messages\r\n          ? [message, ...usersCopy[userIndex].messages]\r\n          : null,\r\n        latestMessage: message,\r\n      };\r\n      usersCopy[userIndex] = newUser;\r\n      return {\r\n        ...state,\r\n        users: usersCopy,\r\n      };\r\n\r\n    default:\r\n      throw new Error(`Unknown action type: ${action.type}`);\r\n  }\r\n};\r\n\r\nexport const MessageProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(messageReducer, { users: null });\r\n  return (\r\n    <MessageDispatchContex.Provider value={dispatch}>\r\n      <MessageStateContex.Provider value={state}>\r\n        {children}\r\n      </MessageStateContex.Provider>\r\n    </MessageDispatchContex.Provider>\r\n  );\r\n};\r\n\r\nexport const useMessageState = () => useContext(MessageStateContex);\r\nexport const useMessageDispatch = () => useContext(MessageDispatchContex);\r\n","import React from \"react\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport { Col, Image } from \"react-bootstrap\";\r\nimport { useMessageDispatch, useMessageState } from \"../../context/message\";\r\nimport classNames from \"classnames\";\r\n\r\nconst GET_USERS = gql`\r\n  query getUser {\r\n    getUsers {\r\n      username\r\n      createdAt\r\n      imageUrl\r\n      latestMessage {\r\n        uuid\r\n        from\r\n        to\r\n        createdAt\r\n        content\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function User() {\r\n  const dispatch = useMessageDispatch();\r\n  const { users } = useMessageState();\r\n  const selectedUser = users?.find((u) => u.selected === true)?.username;\r\n  // Get users\r\n  const { loading } = useQuery(GET_USERS, {\r\n    onCompleted: (data) =>\r\n      dispatch({ type: \"SET_USER\", payload: data.getUsers }),\r\n    onError: (err) => console.log(err),\r\n  });\r\n\r\n  // Get the user data\r\n  let usersMarkup;\r\n  if (!users || loading) {\r\n    usersMarkup = <p>Loading...</p>;\r\n  } else if (users.length === 0) {\r\n    usersMarkup = <p>No users join the chat.</p>;\r\n  } else if (users.length > 0) {\r\n    usersMarkup = users.map((user) => {\r\n      const selected = selectedUser === user.username;\r\n      return (\r\n        <div\r\n          role=\"button\"\r\n          className={classNames(\r\n            \"user-div d-flex justify-content-center justify-content-md-start p-3 \",\r\n            {\r\n              \"bg-white\": selected,\r\n            }\r\n          )}\r\n          key={user.username}\r\n          onClick={() => {\r\n            dispatch({ type: \"SET_SELECTED_USER\", payload: user.username });\r\n          }}\r\n        >\r\n          <Image\r\n            src={\r\n              user.imageUrl ||\r\n              \"https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y\"\r\n            }\r\n            className=\"user-image\"\r\n          />\r\n          <div className=\"d-none d-md-block ml-2\">\r\n            <p className=\"text-success\">{user.username}</p>\r\n            <p className=\"font-weight-light\">\r\n              {user.latestMessage\r\n                ? user.latestMessage.content\r\n                : \"You are not connected.\"}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n  return (\r\n    <Col xs={2} md={4} className=\"user-data bg-secondary p-0\">\r\n      {usersMarkup}\r\n    </Col>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport moment from \"moment\";\r\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\n\r\nimport { useAuthState } from \"../../context/auth\";\r\n\r\nexport default function Message({ message }) {\r\n  // console.log(message);\r\n  const { user } = useAuthState();\r\n  const sent = message.from === user.username;\r\n  const received = !sent;\r\n\r\n  return (\r\n    <OverlayTrigger\r\n      placement={sent ? \"right\" : \"left\"}\r\n      overlay={\r\n        <Tooltip>\r\n          {moment(message.createdAt).format(\"MMMM DD, YYYY @ h:mm a\")}\r\n        </Tooltip>\r\n      }\r\n      transition={false}\r\n    >\r\n      <div\r\n        className={classNames(\"d-flex my-3\", {\r\n          \"ml-auto\": sent,\r\n          \"mr-auto\": received,\r\n        })}\r\n      >\r\n        <div\r\n          className={classNames(\"py-2 px-3 rounded-pill\", {\r\n            \"bg-primary\": sent,\r\n            \"bg-secondary\": received,\r\n          })}\r\n        >\r\n          <p className={classNames({ \"text-white\": sent })} key={message.uuid}>\r\n            {message.content}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </OverlayTrigger>\r\n  );\r\n}\r\n","import React, { Fragment, useEffect, useState } from \"react\";\r\nimport { gql, useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { Col, Form } from \"react-bootstrap\";\r\n\r\nimport { useMessageDispatch, useMessageState } from \"../../context/message\";\r\n\r\nimport Message from \"./message\";\r\n\r\nconst SEND_MESSAGE = gql`\r\n  mutation sendMessage($to: String!, $content: String!) {\r\n    sendMessage(to: $to, content: $content) {\r\n      uuid\r\n      from\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_MESSAGES = gql`\r\n  query getMessages($from: String!) {\r\n    getMessages(from: $from) {\r\n      uuid\r\n      from\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Messages() {\r\n  const { users } = useMessageState();\r\n  const dispatch = useMessageDispatch();\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const selectedUser = users?.find((u) => u.selected === true);\r\n  const messages = selectedUser?.messages;\r\n\r\n  const [getMessages, { loading: messagesLoading, data: messagesData }] =\r\n    useLazyQuery(GET_MESSAGES);\r\n\r\n  const [sendMessage] = useMutation(SEND_MESSAGE, {\r\n    onError: (err) => console.log(err),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedUser && !selectedUser.messages) {\r\n      getMessages({ variables: { from: selectedUser.username } });\r\n    }\r\n  }, [selectedUser]);\r\n\r\n  useEffect(() => {\r\n    if (messagesData) {\r\n      dispatch({\r\n        type: \"SET_USER_MESSAGES\",\r\n        payload: {\r\n          username: selectedUser.username,\r\n          messages: messagesData.getMessages,\r\n        },\r\n      });\r\n    }\r\n  }, [messagesData]);\r\n\r\n  const submitMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (content.trim() === \"\" || !selectedUser) return;\r\n\r\n    setContent(\"\");\r\n\r\n    // mutation for sending the message\r\n    sendMessage({ variables: { to: selectedUser.username, content } });\r\n  };\r\n\r\n  let selectedChatMarkup;\r\n  if (!messages && !messagesLoading) {\r\n    selectedChatMarkup = <p className=\"info-text\">Select a friend</p>;\r\n  } else if (messagesLoading) {\r\n    selectedChatMarkup = <p className=\"info-text\">Loading..</p>;\r\n  } else if (messages.length > 0) {\r\n    selectedChatMarkup = messages.map((message, index) => (\r\n      <Fragment key={message.uuid}>\r\n        <Message message={message} />\r\n        {index === messages.length - 1 && (\r\n          <div className=\"invisible\">\r\n            <hr className=\"m-0\" />\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    ));\r\n  } else if (messages.length === 0) {\r\n    selectedChatMarkup = (\r\n      <p className=\"info-text\">\r\n        You are now connected! send your first message!\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Col xs={10} md={8}>\r\n      <div className=\"messages-box d-flex flex-column-reverse\">\r\n        {selectedChatMarkup}\r\n      </div>\r\n      <div>\r\n        <Form onSubmit={submitMessage}>\r\n          <Form.Group className=\"d-flex align-items-center\">\r\n            <Form.Control\r\n              type=\"text\"\r\n              className=\"message-input rounded-pill p-4 bg-secondary border-0\"\r\n              placeholder=\"Type a message..\"\r\n              value={content}\r\n              onChange={(e) => setContent(e.target.value)}\r\n            />\r\n            <i\r\n              className=\"fas fa-paper-plane fa-2x text-primary ml-2\"\r\n              onClick={submitMessage}\r\n              role=\"button\"\r\n            ></i>\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n","import React, { Fragment, useEffect } from \"react\";\r\nimport { Row, Button } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { useAuthDispatch, useAuthState } from \"../../context/auth\";\r\nimport { useMessageDispatch } from \"../../context/message\";\r\n\r\nimport { gql, useSubscription } from \"@apollo/client\";\r\n\r\nimport User from \"./Users\";\r\nimport Message from \"./Messages\";\r\n\r\nconst NEW_MESSAGE = gql`\r\n  subscription newMessage {\r\n    newMessage {\r\n      uuid\r\n      from\r\n      to\r\n      content\r\n      createdAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Home() {\r\n  const authDispatch = useAuthDispatch();\r\n  const messageDispatch = useMessageDispatch();\r\n  const { user } = useAuthState();\r\n  const { data: messageData, error: messageError } =\r\n    useSubscription(NEW_MESSAGE);\r\n\r\n  useEffect(() => {\r\n    if (messageError) console.log(messageError);\r\n    if (messageData) {\r\n      const message = messageData.newMessage;\r\n      const otherUser =\r\n        user.username === message.to ? message.from : message.to;\r\n      messageDispatch({\r\n        type: \"ADD_MESSAGE\",\r\n        payload: { username: otherUser, message: messageData.newMessage },\r\n      });\r\n    }\r\n  }, [messageError, messageData]);\r\n\r\n  const logout = () => {\r\n    authDispatch({ type: \"LOGOUT\" });\r\n    localStorage.removeItem(\"token\");\r\n    window.location.href = \"/login\";\r\n  };\r\n\r\n  return (\r\n    // <div className=\"main\">\r\n    <Fragment>\r\n      <Row className=\"bg-white justify-content-around mb-2\">\r\n        <Link to=\"/login\">\r\n          <Button variant=\"link\">Login</Button>\r\n        </Link>\r\n        <Link to=\"/register\">\r\n          <Button variant=\"link\">Register</Button>\r\n        </Link>\r\n        <Button variant=\"link\" onClick={logout}>\r\n          Logout\r\n        </Button>\r\n      </Row>\r\n      <Row className=\"bg-white \">\r\n        <User />\r\n        <Message />\r\n      </Row>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\n\r\nimport { useAuthState } from \"../context/auth\";\r\n\r\nexport default function DynamicRoute(props) {\r\n  const { user } = useAuthState();\r\n  if (props.authenticated && !user) {\r\n    return <Redirect to=\"/login\" />;\r\n  } else if (props.guest && user) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return <Route component={props.component} {...props} />;\r\n  }\r\n}\r\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\n\nimport ApolloProvider from \"./apolloProvider\";\n\nimport \"./App.scss\";\n\nimport Register from \"./pages/Register\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/home/Home\";\n\nimport { AuthProvider } from \"./context/auth\";\nimport { MessageProvider } from \"./context/message\";\nimport DynamicRoute from \"./util/DynamicRoute\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <MessageProvider>\n        <ApolloProvider>\n          <BrowserRouter>\n            <Container className=\"pt-4\">\n              <Switch>\n                <DynamicRoute exact path=\"/\" component={Home} authenticated />\n                <DynamicRoute path=\"/register\" component={Register} guest />\n                <DynamicRoute path=\"/login\" component={Login} guest />\n              </Switch>\n            </Container>\n          </BrowserRouter>\n        </ApolloProvider>\n      </MessageProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}